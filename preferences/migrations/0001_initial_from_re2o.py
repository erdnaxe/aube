# -*- mode: python; coding: utf-8 -*-
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright Â© 2019  Alexandre Iooss

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import preferences.models
import re2o.aes_field
import re2o.mixins


def create_radius_policy(apps, schema_editor):
    OptionalTopologie = apps.get_model('preferences', 'OptionalTopologie')
    RadiusOption = apps.get_model('preferences', 'RadiusOption')

    option, _ = OptionalTopologie.objects.get_or_create()

    radius_option = RadiusOption()
    radius_option.radius_general_policy = option.radius_general_policy
    radius_option.vlan_decision_ok = option.vlan_decision_ok

    radius_option.save()


def revert_radius(apps, schema_editor):
    pass


def create_defaults(apps, schema_editor):
    CotisationsOption = apps.get_model('preferences', 'CotisationsOption')
    CotisationsOption.objects.get_or_create()


class Migration(migrations.Migration):
    replaces = [('preferences', '0001_initial'),
                ('preferences', '0002_auto_20170625_1923'),
                ('preferences', '0003_optionaluser_solde_negatif'),
                ('preferences', '0004_assooption_services'),
                ('preferences', '0005_auto_20170824_0139'),
                ('preferences', '0006_auto_20170824_0143'),
                ('preferences', '0007_auto_20170824_2056'),
                ('preferences', '0008_auto_20170824_2122'),
                ('preferences', '0009_assooption_utilisateur_asso'),
                ('preferences', '0010_auto_20170825_0459'),
                ('preferences', '0011_auto_20170825_2307'),
                ('preferences', '0012_generaloption_req_expire_hrs'),
                ('preferences', '0013_generaloption_site_name'),
                ('preferences', '0014_generaloption_email_from'),
                ('preferences', '0015_optionaltopologie_radius_general_policy'),
                ('preferences', '0016_auto_20170902_1520'),
                ('preferences', '0017_mailmessageoption'),
                ('preferences', '0018_optionaltopologie_mac_autocapture'),
                (
                    'preferences',
                    '0019_remove_optionaltopologie_mac_autocapture'
                ),
                ('preferences', '0020_optionalmachine_ipv6'),
                ('preferences', '0021_auto_20171015_1741'),
                ('preferences', '0022_auto_20171015_1758'),
                ('preferences', '0023_auto_20171015_2033'),
                ('preferences', '0024_optionaluser_all_can_create'),
                ('preferences', '0025_auto_20171231_2142'),
                ('preferences', '0025_generaloption_general_message'),
                ('preferences', '0026_auto_20171216_0401'),
                ('preferences', '0027_merge_20180106_2019'),
                ('preferences', '0028_auto_20180111_1129'),
                ('preferences', '0029_auto_20180111_1134'),
                ('preferences', '0030_auto_20180111_2346'),
                ('preferences', '0031_optionaluser_self_adhesion'),
                ('preferences', '0032_optionaluser_min_online_payment'),
                ('preferences', '0033_generaloption_gtu_sum_up'),
                ('preferences', '0034_auto_20180114_2025'),
                ('preferences', '0035_auto_20180114_2132'),
                ('preferences', '0036_auto_20180114_2141'),
                ('preferences', '0037_auto_20180114_2156'),
                ('preferences', '0038_auto_20180114_2209'),
                ('preferences', '0039_auto_20180115_0003'),
                ('preferences', '0040_auto_20180129_1745'),
                ('preferences', '0028_auto_20180128_2203'),
                ('preferences', '0041_merge_20180130_0052'),
                ('preferences', '0042_auto_20180222_1743'),
                ('preferences', '0043_optionalmachine_create_machine'),
                ('preferences', '0028_assooption_description'),
                ('preferences', '0029_auto_20180318_1005'),
                ('preferences', '0029_auto_20180318_0213'),
                ('preferences', '0030_merge_20180320_1419'),
                ('preferences', '0031_auto_20180323_0218'),
                ('preferences', '0032_optionaluser_shell_default'),
                ('preferences', '0033_accueiloption'),
                ('preferences', '0034_auto_20180416_1120'),
                ('preferences', '0035_optionaluser_allow_self_subscription'),
                ('preferences', '0044_remove_payment_pass'),
                ('preferences', '0045_remove_unused_payment_fields'),
                ('preferences', '0046_optionaluser_mail_extension'),
                ('preferences', '0047_mailcontact'),
                ('preferences', '0048_auto_20180811_1515'),
                ('preferences', '0049_optionaluser_self_change_shell'),
                ('preferences', '0050_auto_20180818_1329'),
                ('preferences', '0051_auto_20180919_2225'),
                ('preferences', '0052_optionaluser_delete_notyetactive'),
                ('preferences', '0053_optionaluser_self_change_room'),
                ('preferences', '0055_generaloption_main_site_url'),
                ('preferences', '0056_1_radiusoption'),
                ('preferences', '0056_2_radiusoption'),
                ('preferences', '0056_3_radiusoption'),
                ('preferences', '0056_4_radiusoption'),
                ('preferences', '0057_optionaluser_all_users_active'),
                ('preferences', '0058_auto_20190108_1650'),
                ('preferences', '0059_auto_20190120_1739')]

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GeneralOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('search_display_page', models.IntegerField(default=15)),
                ('pagination_large_number', models.IntegerField(default=8)),
                ('pagination_number', models.IntegerField(default=25)),
                ('req_expire_hrs', models.IntegerField(default=48)),
                ('site_name', models.CharField(default='Re2o', max_length=32)),
                ('email_from', models.EmailField(default='www-data@example.com',
                                                 max_length=254)),
                ('general_message_fr', models.TextField(blank=True, default='',
                                                        help_text='General message displayed on the French version of the website (e.g. in case of maintenance)')),
                ('GTU_sum_up', models.TextField(blank=True, default='')),
                ('GTU', models.FileField(blank=True, default='', null=True,
                                         upload_to='')),
                ('general_message_en', models.TextField(blank=True, default='',
                                                        help_text='General message displayed on the English version of the website (e.g. in case of maintenance)')),
                ('main_site_url',
                 models.URLField(default='http://re2o.example.org',
                                 max_length=255)),
            ],
            options={
                'permissions': (
                    ('view_generaloption', 'Can view the general options'),),
                'verbose_name': 'general options',
            },
        ),
        migrations.CreateModel(
            name='OptionalMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('password_machine', models.BooleanField(default=False)),
                ('max_lambdauser_interfaces', models.IntegerField(default=10)),
                ('max_lambdauser_aliases', models.IntegerField(default=10)),
                ('ipv6_mode', models.CharField(
                    choices=[('SLAAC', 'Autoconfiguration by RA'),
                             ('DHCPV6', 'IP addresses assigning by DHCPv6'),
                             ('DISABLED', 'Disabled')], default='DISABLED',
                    max_length=32)),
                ('create_machine', models.BooleanField(default=True)),
            ],
            options={
                'permissions': (
                    ('view_optionalmachine', 'Can view the machine options'),),
                'verbose_name': 'machine options',
            },
        ),
        migrations.CreateModel(
            name='OptionalUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('is_tel_mandatory', models.BooleanField(default=True)),
                ('gpg_fingerprint', models.BooleanField(default=True)),
                ('self_adhesion', models.BooleanField(default=False,
                                                      help_text='A new user can create their account on Re2o')),
                ('all_can_create_adherent', models.BooleanField(default=False,
                                                                help_text='Users can create a member')),
                ('all_can_create_club', models.BooleanField(default=False,
                                                            help_text='Users can create a club')),
                ('shell_default', models.OneToOneField(blank=True, null=True,
                                                       on_delete=django.db.models.deletion.PROTECT,
                                                       to='users.ListShell')),
                ('local_email_accounts_enabled',
                 models.BooleanField(default=False,
                                     help_text='Enable local email accounts for users')),
                ('local_email_domain', models.CharField(default='@example.org',
                                                        help_text='Domain to use for local email accounts',
                                                        max_length=32)),
                ('max_email_address', models.IntegerField(default=15,
                                                          help_text='Maximum number of local email addresses for a standard user')),
                ('self_change_shell', models.BooleanField(default=False,
                                                          help_text='Users can edit their shell')),
                ('delete_notyetactive', models.IntegerField(default=15,
                                                            help_text='Inactive users will be deleted after this number of days')),
                ('self_change_room', models.BooleanField(default=False,
                                                         help_text='Users can edit their room')),
            ],
            options={
                'permissions': (
                    ('view_optionaluser', 'Can view the user options'),),
                'verbose_name': 'user options',
            },
        ),
        migrations.CreateModel(
            name='AssoOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('name', models.CharField(
                    default='Networking organisation school Something',
                    max_length=256)),
                ('siret',
                 models.CharField(default='00000000000000', max_length=32)),
                ('contact', models.EmailField(default='contact@example.org',
                                              max_length=254)),
                ('telephone',
                 models.CharField(default='0000000000', max_length=15)),
                ('pseudo',
                 models.CharField(default='Organisation', max_length=32)),
                ('adresse1', models.CharField(default='Threadneedle Street',
                                              max_length=128)),
                ('adresse2',
                 models.CharField(default='London EC2R 8AH', max_length=128)),
                ('utilisateur_asso', models.OneToOneField(blank=True, null=True,
                                                          on_delete=django.db.models.deletion.PROTECT,
                                                          to=settings.AUTH_USER_MODEL)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'permissions': (
                    ('view_assooption', 'Can view the organisation options'),),
                'verbose_name': 'organisation options',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('url', models.URLField()),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, upload_to='logo')),
            ],
            options={
                'permissions': (
                    ('view_service', 'Can view the service options'),),
                'verbose_name': 'service',
                'verbose_name_plural': 'services',
            },
        ),
        migrations.CreateModel(
            name='OptionalTopologie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('vlan_decision_nok',
                 models.OneToOneField(blank=True, null=True,
                                      on_delete=django.db.models.deletion.PROTECT,
                                      related_name='decision_nok',
                                      to='machines.Vlan')),
                ('vlan_decision_ok', models.OneToOneField(blank=True, null=True,
                                                          on_delete=django.db.models.deletion.PROTECT,
                                                          related_name='decision_ok',
                                                          to='machines.Vlan')),
                ('radius_general_policy', models.CharField(choices=[
                    ('MACHINE', "On the IP range's VLAN of the machine"), (
                        'DEFINED',
                        "Preset in 'VLAN for machines accepted by RADIUS'")],
                    default='DEFINED',
                    max_length=32)),
                ('sftp_login', models.CharField(blank=True,
                                                help_text='Login sftp des switchs',
                                                max_length=32, null=True)),
                ('sftp_pass', re2o.aes_field.AESEncryptedField(blank=True,
                                                               help_text='Mot de passe sftp',
                                                               max_length=63,
                                                               null=True)),
                ('switchs_ip_type', models.OneToOneField(blank=True,
                                                         help_text="Plage d'ip de management des switchs",
                                                         null=True,
                                                         on_delete=django.db.models.deletion.PROTECT,
                                                         to='machines.IpType')),
                ('switchs_provision',
                 models.CharField(choices=[('sftp', 'sftp'), ('tftp', 'tftp')],
                                  default='tftp',
                                  help_text='Mode de rÃ©cupÃ©ration des confs par les switchs',
                                  max_length=32)),
                ('switchs_rest_management', models.BooleanField(default=False,
                                                                help_text='Rest management, activÃ© si provision auto')),
                ('switchs_web_management', models.BooleanField(default=False,
                                                               help_text='Web management, activÃ© si provision automatique')),
                ('switchs_web_management_ssl',
                 models.BooleanField(default=False,
                                     help_text='Web management ssl. Assurez-vous que un certif est installÃ© sur le switch !')),
            ],
            options={
                'permissions': (
                    ('view_optionaltopologie',
                     'Can view the topology options'),),
                'verbose_name': 'topology options',
            },
        ),
        migrations.CreateModel(
            name='MailMessageOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('welcome_mail_fr', models.TextField(default='',
                                                     help_text='Mail de bienvenue en franÃ§ais')),
                ('welcome_mail_en', models.TextField(default='',
                                                     help_text='Mail de bienvenue en anglais')),
            ],
            options={
                'permissions': (('view_mailmessageoption',
                                 'Can view the email message options'),),
                'verbose_name': 'email message options',
            },
        ),
        migrations.CreateModel(
            name='HomeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('facebook_url', models.URLField(blank=True, null=True)),
                ('twitter_url', models.URLField(blank=True, null=True)),
                ('twitter_account_name',
                 models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'permissions': (
                    ('view_homeoption', 'Can view the homepage options'),),
                'verbose_name': 'homepage options',
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MailContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('address', models.EmailField(default='contact@example.org',
                                              help_text='Contact email address',
                                              max_length=254)),
                ('commentary', models.CharField(blank=True,
                                                help_text='Description of the associated email address.',
                                                max_length=256, null=True)),
            ],
            options={
                'permissions': (('view_mailcontact',
                                 'Can view a contact email address object'),),
                'verbose_name': 'contact email address',
                'verbose_name_plural': 'contact email addresses',
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('radius_key',
                 re2o.aes_field.AESEncryptedField(help_text='Clef radius',
                                                  max_length=255)),
                ('comment', models.CharField(blank=True,
                                             help_text='Commentaire de cette clef',
                                             max_length=255, null=True)),
                ('default_switch', models.BooleanField(default=True,
                                                       help_text='Clef par dÃ©faut des switchs',
                                                       unique=True)),
            ],
            options={
                'permissions': (
                    ('view_radiuskey', 'Peut voir un objet radiuskey'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Reminder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('days', models.IntegerField(default=7,
                                             help_text="DÃ©lais entre le mail et la fin d'adhÃ©sion",
                                             unique=True)),
                ('message', models.CharField(blank=True, default='',
                                             help_text='Message affichÃ© spÃ©cifiquement pour ce rappel',
                                             max_length=255, null=True)),
            ],
            options={
                'permissions': (
                    ('view_reminder', 'Peut voir un objet reminder'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SwitchManagementCred',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('management_id',
                 models.CharField(help_text='Login du switch', max_length=63)),
                ('management_pass',
                 re2o.aes_field.AESEncryptedField(help_text='Mot de passe',
                                                  max_length=63)),
                ('default_switch', models.BooleanField(default=True,
                                                       help_text='Creds par dÃ©faut des switchs',
                                                       unique=True)),
            ],
            options={
                'permissions': (('view_switchmanagementcred',
                                 'Peut voir un objet switchmanagementcred'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('radius_general_policy', models.CharField(choices=[
                    ('MACHINE', "On the IP range's VLAN of the machine"), (
                        'DEFINED',
                        "Preset in 'VLAN for machines accepted by RADIUS'")],
                    default='DEFINED',
                    max_length=32)),
                ('banned_vlan', models.ForeignKey(blank=True,
                                                  help_text='Vlan for banned if not rejected.',
                                                  null=True,
                                                  on_delete=django.db.models.deletion.PROTECT,
                                                  related_name='banned_vlan',
                                                  to='machines.Vlan',
                                                  verbose_name='Banned Vlan')),
                ('non_member_vlan', models.ForeignKey(blank=True,
                                                      help_text='Vlan for non members if not rejected.',
                                                      null=True,
                                                      on_delete=django.db.models.deletion.PROTECT,
                                                      related_name='non_member_vlan',
                                                      to='machines.Vlan',
                                                      verbose_name='Non member Vlan')),
                ('unknown_machine_vlan', models.ForeignKey(blank=True,
                                                           help_text='Vlan for unknown machines if not rejected.',
                                                           null=True,
                                                           on_delete=django.db.models.deletion.PROTECT,
                                                           related_name='unknown_machine_vlan',
                                                           to='machines.Vlan',
                                                           verbose_name='Unknown machine Vlan')),
                ('unknown_port_vlan', models.ForeignKey(blank=True,
                                                        help_text='Vlan for unknown ports if not rejected.',
                                                        null=True,
                                                        on_delete=django.db.models.deletion.PROTECT,
                                                        related_name='unknown_port_vlan',
                                                        to='machines.Vlan',
                                                        verbose_name='Unknown port Vlan')),
                ('unknown_room_vlan', models.ForeignKey(blank=True,
                                                        help_text='Vlan for unknown room if not rejected.',
                                                        null=True,
                                                        on_delete=django.db.models.deletion.PROTECT,
                                                        related_name='unknown_room_vlan',
                                                        to='machines.Vlan',
                                                        verbose_name='Unknown room Vlan')),
                ('banned', models.CharField(
                    choices=[('REJECT', 'Reject the machine'),
                             ('SET_VLAN', 'Place the machine on the VLAN')],
                    default='REJECT', max_length=32,
                    verbose_name='Policy for banned users.')),
                ('non_member', models.CharField(
                    choices=[('REJECT', 'Reject the machine'),
                             ('SET_VLAN', 'Place the machine on the VLAN')],
                    default='REJECT', max_length=32,
                    verbose_name='Policy non member users.')),
                ('unknown_machine', models.CharField(
                    choices=[('REJECT', 'Reject the machine'),
                             ('SET_VLAN', 'Place the machine on the VLAN')],
                    default='REJECT', max_length=32,
                    verbose_name='Policy for unknown machines')),
                ('unknown_port', models.CharField(
                    choices=[('REJECT', 'Reject the machine'),
                             ('SET_VLAN', 'Place the machine on the VLAN')],
                    default='REJECT', max_length=32,
                    verbose_name='Policy for unknown machines')),
                ('unknown_room', models.CharField(
                    choices=[('REJECT', 'Reject the machine'),
                             ('SET_VLAN', 'Place the machine on the VLAN')],
                    default='REJECT', max_length=32,
                    verbose_name='Policy for machine connecting from unregistered room (relevant on ports with STRICT radius mode)')),
                ('vlan_decision_ok', models.OneToOneField(blank=True, null=True,
                                                          on_delete=django.db.models.deletion.PROTECT,
                                                          related_name='vlan_ok_option',
                                                          to='machines.Vlan')),
            ],
            options={
                'verbose_name': 'radius policies',
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.RunPython(
            code=create_radius_policy,
            reverse_code=revert_radius,
        ),
        migrations.RemoveField(
            model_name='optionaltopologie',
            name='radius_general_policy',
        ),
        migrations.RemoveField(
            model_name='optionaltopologie',
            name='vlan_decision_nok',
        ),
        migrations.RemoveField(
            model_name='optionaltopologie',
            name='vlan_decision_ok',
        ),
        migrations.AlterField(
            model_name='radiusoption',
            name='unknown_port',
            field=models.CharField(choices=[('REJECT', 'Reject the machine'), (
                'SET_VLAN', 'Place the machine on the VLAN')], default='REJECT',
                                   max_length=32,
                                   verbose_name='Policy for unknown port'),
        ),
        migrations.AddField(
            model_name='optionaluser',
            name='all_users_active',
            field=models.BooleanField(default=False,
                                      help_text='If True, all new created and connected users are active. If False, only when a valid registration has been paid.'),
        ),
        migrations.AlterModelOptions(
            name='radiuskey',
            options={'permissions': (
                ('view_radiuskey', 'Can view a RADIUS key object'),),
                'verbose_name': 'RADIUS key',
                'verbose_name_plural': 'RADIUS keys'},
        ),
        migrations.AlterModelOptions(
            name='radiusoption',
            options={'verbose_name': 'RADIUS policy',
                     'verbose_name_plural': 'RADIUS policies'},
        ),
        migrations.AlterModelOptions(
            name='reminder',
            options={'permissions': (
                ('view_reminder', 'Can view a reminder object'),),
                'verbose_name': 'reminder',
                'verbose_name_plural': 'reminders'},
        ),
        migrations.AlterModelOptions(
            name='switchmanagementcred',
            options={'permissions': (('view_switchmanagementcred',
                                      'Can view a switch management credentials object'),),
                     'verbose_name': 'switch management credentials'},
        ),
        migrations.AlterField(
            model_name='mailmessageoption',
            name='welcome_mail_en',
            field=models.TextField(default='',
                                   help_text='Welcome email in English'),
        ),
        migrations.AlterField(
            model_name='mailmessageoption',
            name='welcome_mail_fr',
            field=models.TextField(default='',
                                   help_text='Welcome email in French'),
        ),
        migrations.AlterField(
            model_name='optionaltopologie',
            name='sftp_login',
            field=models.CharField(blank=True,
                                   help_text='SFTP login for switches',
                                   max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name='optionaltopologie',
            name='sftp_pass',
            field=re2o.aes_field.AESEncryptedField(blank=True,
                                                   help_text='SFTP password',
                                                   max_length=63, null=True),
        ),
        migrations.AlterField(
            model_name='optionaltopologie',
            name='switchs_ip_type',
            field=models.OneToOneField(blank=True,
                                       help_text='IP range for the management of switches',
                                       null=True,
                                       on_delete=django.db.models.deletion.PROTECT,
                                       to='machines.IpType'),
        ),
        migrations.AlterField(
            model_name='optionaltopologie',
            name='switchs_provision',
            field=models.CharField(choices=[('sftp', 'sftp'), ('tftp', 'tftp')],
                                   default='tftp',
                                   help_text='Provision of configuration mode for switches',
                                   max_length=32),
        ),
        migrations.AlterField(
            model_name='optionaltopologie',
            name='switchs_rest_management',
            field=models.BooleanField(default=False,
                                      help_text='REST management, activated in case of automatic provision'),
        ),
        migrations.AlterField(
            model_name='optionaltopologie',
            name='switchs_web_management',
            field=models.BooleanField(default=False,
                                      help_text='Web management, activated in case of automatic provision'),
        ),
        migrations.AlterField(
            model_name='optionaltopologie',
            name='switchs_web_management_ssl',
            field=models.BooleanField(default=False,
                                      help_text='SSL web management, make sure that a certificate is installed on the switch'),
        ),
        migrations.AlterField(
            model_name='optionaluser',
            name='all_can_create_adherent',
            field=models.BooleanField(default=False,
                                      help_text='Users can create a member.'),
        ),
        migrations.AlterField(
            model_name='optionaluser',
            name='all_can_create_club',
            field=models.BooleanField(default=False,
                                      help_text='Users can create a club.'),
        ),
        migrations.AlterField(
            model_name='optionaluser',
            name='delete_notyetactive',
            field=models.IntegerField(default=15,
                                      help_text='Not yet active users will be deleted after this number of days.'),
        ),
        migrations.AlterField(
            model_name='optionaluser',
            name='local_email_accounts_enabled',
            field=models.BooleanField(default=False,
                                      help_text='Enable local email accounts for users.'),
        ),
        migrations.AlterField(
            model_name='optionaluser',
            name='max_email_address',
            field=models.IntegerField(default=15,
                                      help_text='Maximum number of local email addresses for a standard user.'),
        ),
        migrations.AlterField(
            model_name='optionaluser',
            name='self_adhesion',
            field=models.BooleanField(default=False,
                                      help_text='A new user can create their account on Re2o.'),
        ),
        migrations.AlterField(
            model_name='optionaluser',
            name='self_change_room',
            field=models.BooleanField(default=False,
                                      help_text='Users can edit their room.'),
        ),
        migrations.AlterField(
            model_name='optionaluser',
            name='self_change_shell',
            field=models.BooleanField(default=False,
                                      help_text='Users can edit their shell.'),
        ),
        migrations.AlterField(
            model_name='radiuskey',
            name='comment',
            field=models.CharField(blank=True, help_text='Comment for this key',
                                   max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='radiuskey',
            name='default_switch',
            field=models.BooleanField(default=True,
                                      help_text='Default key for switches',
                                      unique=True),
        ),
        migrations.AlterField(
            model_name='radiuskey',
            name='radius_key',
            field=re2o.aes_field.AESEncryptedField(help_text='RADIUS key',
                                                   max_length=255),
        ),
        migrations.AlterField(
            model_name='radiusoption',
            name='banned',
            field=models.CharField(choices=[('REJECT', 'Reject the machine'), (
                'SET_VLAN', 'Place the machine on the VLAN')], default='REJECT',
                                   max_length=32,
                                   verbose_name='Policy for banned users'),
        ),
        migrations.AlterField(
            model_name='radiusoption',
            name='banned_vlan',
            field=models.ForeignKey(blank=True,
                                    help_text='VLAN for banned users if not rejected',
                                    null=True,
                                    on_delete=django.db.models.deletion.PROTECT,
                                    related_name='banned_vlan',
                                    to='machines.Vlan',
                                    verbose_name='Banned users VLAN'),
        ),
        migrations.AlterField(
            model_name='radiusoption',
            name='non_member',
            field=models.CharField(choices=[('REJECT', 'Reject the machine'), (
                'SET_VLAN', 'Place the machine on the VLAN')], default='REJECT',
                                   max_length=32,
                                   verbose_name='Policy for non members'),
        ),
        migrations.AlterField(
            model_name='radiusoption',
            name='non_member_vlan',
            field=models.ForeignKey(blank=True,
                                    help_text='VLAN for non members if not rejected',
                                    null=True,
                                    on_delete=django.db.models.deletion.PROTECT,
                                    related_name='non_member_vlan',
                                    to='machines.Vlan',
                                    verbose_name='Non members VLAN'),
        ),
        migrations.AlterField(
            model_name='radiusoption',
            name='unknown_machine_vlan',
            field=models.ForeignKey(blank=True,
                                    help_text='VLAN for unknown machines if not rejected',
                                    null=True,
                                    on_delete=django.db.models.deletion.PROTECT,
                                    related_name='unknown_machine_vlan',
                                    to='machines.Vlan',
                                    verbose_name='Unknown machines VLAN'),
        ),
        migrations.AlterField(
            model_name='radiusoption',
            name='unknown_port',
            field=models.CharField(choices=[('REJECT', 'Reject the machine'), (
                'SET_VLAN', 'Place the machine on the VLAN')], default='REJECT',
                                   max_length=32,
                                   verbose_name='Policy for unknown ports'),
        ),
        migrations.AlterField(
            model_name='radiusoption',
            name='unknown_port_vlan',
            field=models.ForeignKey(blank=True,
                                    help_text='VLAN for unknown ports if not rejected',
                                    null=True,
                                    on_delete=django.db.models.deletion.PROTECT,
                                    related_name='unknown_port_vlan',
                                    to='machines.Vlan',
                                    verbose_name='Unknown ports VLAN'),
        ),
        migrations.AlterField(
            model_name='radiusoption',
            name='unknown_room',
            field=models.CharField(choices=[('REJECT', 'Reject the machine'), (
                'SET_VLAN', 'Place the machine on the VLAN')], default='REJECT',
                                   max_length=32,
                                   verbose_name='Policy for machines connecting from unregistered rooms (relevant on ports with STRICT RADIUS mode)'),
        ),
        migrations.AlterField(
            model_name='radiusoption',
            name='unknown_room_vlan',
            field=models.ForeignKey(blank=True,
                                    help_text='VLAN for unknown rooms if not rejected',
                                    null=True,
                                    on_delete=django.db.models.deletion.PROTECT,
                                    related_name='unknown_room_vlan',
                                    to='machines.Vlan',
                                    verbose_name='Unknown rooms VLAN'),
        ),
        migrations.AlterField(
            model_name='reminder',
            name='days',
            field=models.IntegerField(default=7,
                                      help_text="Delay between the email and the membership's end",
                                      unique=True),
        ),
        migrations.AlterField(
            model_name='reminder',
            name='message',
            field=models.CharField(blank=True, default='',
                                   help_text='Message displayed specifically for this reminder',
                                   max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='switchmanagementcred',
            name='default_switch',
            field=models.BooleanField(default=True,
                                      help_text='Default credentials for switches',
                                      unique=True),
        ),
        migrations.AlterField(
            model_name='switchmanagementcred',
            name='management_id',
            field=models.CharField(help_text='Switch login', max_length=63),
        ),
        migrations.AlterField(
            model_name='switchmanagementcred',
            name='management_pass',
            field=re2o.aes_field.AESEncryptedField(help_text='Password',
                                                   max_length=63),
        ),
        migrations.CreateModel(
            name='CotisationsOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('send_voucher_mail', models.BooleanField(default=False,
                                                          verbose_name='Send voucher by email when the invoice is controlled.')),
            ],
            options={
                'verbose_name': 'cotisations options',
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DocumentTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('template', models.FileField(upload_to='templates/',
                                              verbose_name='template')),
                ('name', models.CharField(max_length=125, unique=True,
                                          verbose_name='name')),
            ],
            options={
                'verbose_name': 'document template',
                'verbose_name_plural': 'document templates',
            },
            bases=(re2o.mixins.RevMixin, re2o.mixins.AclMixin, models.Model),
        ),
        migrations.AddField(
            model_name='assooption',
            name='pres_name',
            field=models.CharField(default='',
                                   help_text='Displayed on subscription vouchers',
                                   max_length=255,
                                   verbose_name='President of the association'),
        ),
        migrations.AddField(
            model_name='cotisationsoption',
            name='invoice_template',
            field=models.OneToOneField(
                default=preferences.models.default_invoice,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='invoice_template',
                to='preferences.DocumentTemplate',
                verbose_name='Template for invoices'),
        ),
        migrations.AddField(
            model_name='cotisationsoption',
            name='voucher_template',
            field=models.OneToOneField(
                default=preferences.models.default_voucher,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='voucher_template',
                to='preferences.DocumentTemplate',
                verbose_name='Template for subscription voucher'),
        ),
        migrations.RunPython(
            code=create_defaults,
        ),
    ]
