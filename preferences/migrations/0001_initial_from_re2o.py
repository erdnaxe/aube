# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2019-04-08 16:05
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import re2o.aes_field
import re2o.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('machines', '0001_initial_from_re2o'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssoOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Networking organisation school Something', max_length=256)),
                ('siret', models.CharField(default='00000000000000', max_length=32)),
                ('adresse1', models.CharField(default='Threadneedle Street', max_length=128)),
                ('adresse2', models.CharField(default='London EC2R 8AH', max_length=128)),
                ('contact', models.EmailField(default='contact@example.org', max_length=254)),
                ('telephone', models.CharField(default='0000000000', max_length=15)),
                ('pseudo', models.CharField(default='Organisation', max_length=32)),
                ('description', models.TextField(blank=True, null=True)),
                ('pres_name', models.CharField(default='', help_text='Displayed on subscription vouchers', max_length=255, verbose_name='President of the association')),
            ],
            options={
                'verbose_name': 'organisation options',
                'permissions': (('view_assooption', 'Can view the organisation options'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CotisationsOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('send_voucher_mail', models.BooleanField(default=False, verbose_name='Send voucher by email when the invoice is controlled.')),
            ],
            options={
                'verbose_name': 'cotisations options',
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DocumentTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template', models.FileField(upload_to='templates/', verbose_name='template')),
                ('name', models.CharField(max_length=125, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'document template',
                'verbose_name_plural': 'document templates',
            },
            bases=(re2o.mixins.RevMixin, re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GeneralOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general_message_fr', models.TextField(blank=True, default='', help_text='General message displayed on the French version of the website (e.g. in case of maintenance)')),
                ('general_message_en', models.TextField(blank=True, default='', help_text='General message displayed on the English version of the website (e.g. in case of maintenance)')),
                ('search_display_page', models.IntegerField(default=15)),
                ('pagination_number', models.IntegerField(default=25)),
                ('pagination_large_number', models.IntegerField(default=8)),
                ('req_expire_hrs', models.IntegerField(default=48)),
                ('site_name', models.CharField(default='Re2o', max_length=32)),
                ('email_from', models.EmailField(default='www-data@example.com', max_length=254)),
                ('main_site_url', models.URLField(default='http://re2o.example.org', max_length=255)),
                ('GTU_sum_up', models.TextField(blank=True, default='')),
                ('GTU', models.FileField(blank=True, default='', null=True, upload_to='')),
            ],
            options={
                'verbose_name': 'general options',
                'permissions': (('view_generaloption', 'Can view the general options'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HomeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook_url', models.URLField(blank=True, null=True)),
                ('twitter_url', models.URLField(blank=True, null=True)),
                ('twitter_account_name', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'verbose_name': 'homepage options',
                'permissions': (('view_homeoption', 'Can view the homepage options'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MailContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.EmailField(default='contact@example.org', help_text='Contact email address', max_length=254)),
                ('commentary', models.CharField(blank=True, help_text='Description of the associated email address.', max_length=256, null=True)),
            ],
            options={
                'verbose_name': 'contact email address',
                'verbose_name_plural': 'contact email addresses',
                'permissions': (('view_mailcontact', 'Can view a contact email address object'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MailMessageOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('welcome_mail_fr', models.TextField(default='', help_text='Welcome email in French')),
                ('welcome_mail_en', models.TextField(default='', help_text='Welcome email in English')),
            ],
            options={
                'verbose_name': 'email message options',
                'permissions': (('view_mailmessageoption', 'Can view the email message options'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OptionalMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password_machine', models.BooleanField(default=False)),
                ('max_lambdauser_interfaces', models.IntegerField(default=10)),
                ('max_lambdauser_aliases', models.IntegerField(default=10)),
                ('ipv6_mode', models.CharField(choices=[('SLAAC', 'Autoconfiguration by RA'), ('DHCPV6', 'IP addresses assigning by DHCPv6'), ('DISABLED', 'Disabled')], default='DISABLED', max_length=32)),
                ('create_machine', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'machine options',
                'permissions': (('view_optionalmachine', 'Can view the machine options'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OptionalTopologie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('switchs_web_management', models.BooleanField(default=False, help_text='Web management, activated in case of automatic provision')),
                ('switchs_web_management_ssl', models.BooleanField(default=False, help_text='SSL web management, make sure that a certificate is installed on the switch')),
                ('switchs_rest_management', models.BooleanField(default=False, help_text='REST management, activated in case of automatic provision')),
                ('switchs_provision', models.CharField(choices=[('sftp', 'sftp'), ('tftp', 'tftp')], default='tftp', help_text='Provision of configuration mode for switches', max_length=32)),
                ('sftp_login', models.CharField(blank=True, help_text='SFTP login for switches', max_length=32, null=True)),
                ('sftp_pass', re2o.aes_field.AESEncryptedField(blank=True, help_text='SFTP password', max_length=63, null=True)),
            ],
            options={
                'verbose_name': 'topology options',
                'permissions': (('view_optionaltopologie', 'Can view the topology options'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OptionalUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_tel_mandatory', models.BooleanField(default=True)),
                ('gpg_fingerprint', models.BooleanField(default=True)),
                ('all_can_create_club', models.BooleanField(default=False, help_text='Users can create a club.')),
                ('all_can_create_adherent', models.BooleanField(default=False, help_text='Users can create a member.')),
                ('self_change_shell', models.BooleanField(default=False, help_text='Users can edit their shell.')),
                ('self_change_room', models.BooleanField(default=False, help_text='Users can edit their room.')),
                ('local_email_accounts_enabled', models.BooleanField(default=False, help_text='Enable local email accounts for users.')),
                ('local_email_domain', models.CharField(default='@example.org', help_text='Domain to use for local email accounts', max_length=32)),
                ('max_email_address', models.IntegerField(default=15, help_text='Maximum number of local email addresses for a standard user.')),
                ('delete_notyetactive', models.IntegerField(default=15, help_text='Not yet active users will be deleted after this number of days.')),
                ('self_adhesion', models.BooleanField(default=False, help_text='A new user can create their account on Re2o.')),
                ('all_users_active', models.BooleanField(default=False, help_text='If True, all new created and connected users are active. If False, only when a valid registration has been paid.')),
            ],
            options={
                'verbose_name': 'user options',
                'permissions': (('view_optionaluser', 'Can view the user options'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('radius_key', re2o.aes_field.AESEncryptedField(help_text='RADIUS key', max_length=255)),
                ('comment', models.CharField(blank=True, help_text='Comment for this key', max_length=255, null=True)),
                ('default_switch', models.BooleanField(default=True, help_text='Default key for switches', unique=True)),
            ],
            options={
                'verbose_name': 'RADIUS key',
                'verbose_name_plural': 'RADIUS keys',
                'permissions': (('view_radiuskey', 'Can view a RADIUS key object'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('radius_general_policy', models.CharField(choices=[('MACHINE', "On the IP range's VLAN of the machine"), ('DEFINED', "Preset in 'VLAN for machines accepted by RADIUS'")], default='DEFINED', max_length=32)),
                ('unknown_machine', models.CharField(choices=[('REJECT', 'Reject the machine'), ('SET_VLAN', 'Place the machine on the VLAN')], default='REJECT', max_length=32, verbose_name='Policy for unknown machines')),
                ('unknown_port', models.CharField(choices=[('REJECT', 'Reject the machine'), ('SET_VLAN', 'Place the machine on the VLAN')], default='REJECT', max_length=32, verbose_name='Policy for unknown ports')),
                ('unknown_room', models.CharField(choices=[('REJECT', 'Reject the machine'), ('SET_VLAN', 'Place the machine on the VLAN')], default='REJECT', max_length=32, verbose_name='Policy for machines connecting from unregistered rooms (relevant on ports with STRICT RADIUS mode)')),
                ('non_member', models.CharField(choices=[('REJECT', 'Reject the machine'), ('SET_VLAN', 'Place the machine on the VLAN')], default='REJECT', max_length=32, verbose_name='Policy for non members')),
                ('banned', models.CharField(choices=[('REJECT', 'Reject the machine'), ('SET_VLAN', 'Place the machine on the VLAN')], default='REJECT', max_length=32, verbose_name='Policy for banned users')),
                ('banned_vlan', models.ForeignKey(blank=True, help_text='VLAN for banned users if not rejected', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='banned_vlan', to='machines.Vlan', verbose_name='Banned users VLAN')),
                ('non_member_vlan', models.ForeignKey(blank=True, help_text='VLAN for non members if not rejected', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='non_member_vlan', to='machines.Vlan', verbose_name='Non members VLAN')),
                ('unknown_machine_vlan', models.ForeignKey(blank=True, help_text='VLAN for unknown machines if not rejected', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='unknown_machine_vlan', to='machines.Vlan', verbose_name='Unknown machines VLAN')),
                ('unknown_port_vlan', models.ForeignKey(blank=True, help_text='VLAN for unknown ports if not rejected', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='unknown_port_vlan', to='machines.Vlan', verbose_name='Unknown ports VLAN')),
                ('unknown_room_vlan', models.ForeignKey(blank=True, help_text='VLAN for unknown rooms if not rejected', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='unknown_room_vlan', to='machines.Vlan', verbose_name='Unknown rooms VLAN')),
                ('vlan_decision_ok', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vlan_ok_option', to='machines.Vlan')),
            ],
            options={
                'verbose_name': 'RADIUS policy',
                'verbose_name_plural': 'RADIUS policies',
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Reminder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.IntegerField(default=7, help_text="Delay between the email and the membership's end", unique=True)),
                ('message', models.CharField(blank=True, default='', help_text='Message displayed specifically for this reminder', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'reminder',
                'verbose_name_plural': 'reminders',
                'permissions': (('view_reminder', 'Can view a reminder object'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('url', models.URLField()),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, upload_to='logo')),
            ],
            options={
                'verbose_name': 'service',
                'verbose_name_plural': 'services',
                'permissions': (('view_service', 'Can view the service options'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SwitchManagementCred',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('management_id', models.CharField(help_text='Switch login', max_length=63)),
                ('management_pass', re2o.aes_field.AESEncryptedField(help_text='Password', max_length=63)),
                ('default_switch', models.BooleanField(default=True, help_text='Default credentials for switches', unique=True)),
            ],
            options={
                'verbose_name': 'switch management credentials',
                'permissions': (('view_switchmanagementcred', 'Can view a switch management credentials object'),),
            },
            bases=(re2o.mixins.AclMixin, models.Model),
        ),
    ]
