# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2019-04-08 16:05
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import ldapdb.models.fields
import re2o.field_permissions
import re2o.mixins
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('topologie', '0001_initial_from_re2o'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('surname', models.CharField(max_length=255)),
                ('pseudo', models.CharField(help_text='Must only contain letters, numerals or dashes.', max_length=32, unique=True, validators=[users.models.linux_user_validator])),
                ('email', models.EmailField(blank=True, help_text='External email address allowing us to contact you.', max_length=254, null=True)),
                ('local_email_redirect', models.BooleanField(default=False, help_text='Enable redirection of the local email messages to the main email address.')),
                ('local_email_enabled', models.BooleanField(default=False, help_text='Enable the local email account.')),
                ('comment', models.CharField(blank=True, help_text='Comment, school year', max_length=255)),
                ('pwd_ntlm', models.CharField(max_length=255)),
                ('state', models.IntegerField(choices=[(0, 'Active'), (1, 'Disabled'), (2, 'Archived'), (3, 'Not yet active'), (4, 'Full Archived')], default=3)),
                ('registered', models.DateTimeField(auto_now_add=True)),
                ('telephone', models.CharField(blank=True, max_length=15, null=True)),
                ('uid_number', models.PositiveIntegerField(default=users.models.get_fresh_user_uid, unique=True)),
                ('rezo_rez_uid', models.PositiveIntegerField(blank=True, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'user (member or club)',
                'verbose_name_plural': 'users (members or clubs)',
                'permissions': (('change_user_password', 'Can change the password of a user'), ('change_user_state', 'Can edit the state of a user'), ('change_user_force', 'Can force the move'), ('change_user_shell', 'Can edit the shell of a user'), ('change_user_groups', 'Can edit the groups of rights of a user (critical permission)'), ('change_all_users', 'Can edit all users, including those with rights.'), ('view_user', 'Can view a user object')),
            },
            bases=(re2o.mixins.RevMixin, re2o.field_permissions.FieldPermissionModelMixin, models.Model, re2o.mixins.AclMixin),
        ),
        migrations.CreateModel(
            name='Ban',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raison', models.CharField(max_length=255)),
                ('date_start', models.DateTimeField(auto_now_add=True)),
                ('date_end', models.DateTimeField()),
                ('state', models.IntegerField(choices=[(0, 'HARD (no access)'), (1, 'SOFT (local access only)'), (2, 'RESTRICTED (speed limitation)')], default=0)),
            ],
            options={
                'verbose_name': 'ban',
                'verbose_name_plural': 'bans',
                'permissions': (('view_ban', 'Can view a ban object'),),
            },
            bases=(re2o.mixins.RevMixin, re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EMailAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_part', models.CharField(help_text='Local part of the email address', max_length=128, unique=True)),
            ],
            options={
                'verbose_name': 'local email account',
                'verbose_name_plural': 'local email accounts',
                'permissions': (('view_emailaddress', 'Can view a local email account object'),),
            },
            bases=(re2o.mixins.RevMixin, re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LdapServiceUser',
            fields=[
                ('dn', ldapdb.models.fields.CharField(max_length=200, primary_key=True, serialize=False)),
                ('name', ldapdb.models.fields.CharField(db_column='cn', max_length=200)),
                ('user_password', ldapdb.models.fields.CharField(blank=True, db_column='userPassword', max_length=200, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LdapServiceUserGroup',
            fields=[
                ('dn', ldapdb.models.fields.CharField(max_length=200, primary_key=True, serialize=False)),
                ('name', ldapdb.models.fields.CharField(db_column='cn', max_length=200)),
                ('members', ldapdb.models.fields.ListField(blank=True, db_column='member')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LdapUser',
            fields=[
                ('dn', ldapdb.models.fields.CharField(max_length=200, primary_key=True, serialize=False)),
                ('gid', ldapdb.models.fields.IntegerField(db_column='gidNumber')),
                ('name', ldapdb.models.fields.CharField(db_column='cn', max_length=200)),
                ('uid', ldapdb.models.fields.CharField(db_column='uid', max_length=200)),
                ('uidNumber', ldapdb.models.fields.IntegerField(db_column='uidNumber', unique=True)),
                ('sn', ldapdb.models.fields.CharField(db_column='sn', max_length=200)),
                ('login_shell', ldapdb.models.fields.CharField(blank=True, db_column='loginShell', max_length=200, null=True)),
                ('mail', ldapdb.models.fields.CharField(db_column='mail', max_length=200)),
                ('given_name', ldapdb.models.fields.CharField(db_column='givenName', max_length=200)),
                ('home_directory', ldapdb.models.fields.CharField(db_column='homeDirectory', max_length=200)),
                ('display_name', ldapdb.models.fields.CharField(blank=True, db_column='displayName', max_length=200, null=True)),
                ('dialupAccess', ldapdb.models.fields.CharField(db_column='dialupAccess', max_length=200)),
                ('sambaSID', ldapdb.models.fields.IntegerField(db_column='sambaSID', unique=True)),
                ('user_password', ldapdb.models.fields.CharField(blank=True, db_column='userPassword', max_length=200, null=True)),
                ('sambat_nt_password', ldapdb.models.fields.CharField(blank=True, db_column='sambaNTPassword', max_length=200, null=True)),
                ('macs', ldapdb.models.fields.ListField(blank=True, db_column='radiusCallingStationId', max_length=200, null=True)),
                ('shadowexpire', ldapdb.models.fields.CharField(blank=True, db_column='shadowExpire', max_length=200, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LdapUserGroup',
            fields=[
                ('dn', ldapdb.models.fields.CharField(max_length=200, primary_key=True, serialize=False)),
                ('gid', ldapdb.models.fields.IntegerField(db_column='gidNumber')),
                ('members', ldapdb.models.fields.ListField(blank=True, db_column='memberUid')),
                ('name', ldapdb.models.fields.CharField(db_column='cn', max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ListRight',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('unix_name', models.CharField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator('^[a-z]+$', message='UNIX groups can only contain lower case letters.')])),
                ('gid', models.PositiveIntegerField(null=True, unique=True)),
                ('critical', models.BooleanField(default=False)),
                ('details', models.CharField(blank=True, help_text='Description', max_length=255)),
            ],
            options={
                'verbose_name': 'group of rights',
                'verbose_name_plural': 'groups of rights',
                'permissions': (('view_listright', 'Can view a group of rights object'),),
            },
            bases=(re2o.mixins.RevMixin, re2o.mixins.AclMixin, 'auth.group'),
        ),
        migrations.CreateModel(
            name='ListShell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shell', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'shell',
                'verbose_name_plural': 'shells',
                'permissions': (('view_listshell', 'Can view a shell object'),),
            },
            bases=(re2o.mixins.RevMixin, re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('PW', 'Password'), ('EM', 'Email address')], max_length=2)),
                ('token', models.CharField(max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'school',
                'verbose_name_plural': 'schools',
                'permissions': (('view_school', 'Can view a school object'),),
            },
            bases=(re2o.mixins.RevMixin, re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ServiceUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('pseudo', models.CharField(help_text='Must only contain letters, numerals or dashes.', max_length=32, unique=True, validators=[users.models.linux_user_validator])),
                ('access_group', models.CharField(choices=[('auth', 'auth'), ('readonly', 'readonly'), ('usermgmt', 'usermgmt')], default='readonly', max_length=32)),
                ('comment', models.CharField(blank=True, help_text='Comment', max_length=255)),
            ],
            options={
                'verbose_name': 'service user',
                'verbose_name_plural': 'service users',
                'permissions': (('view_serviceuser', 'Can view a service user object'),),
            },
            bases=(re2o.mixins.RevMixin, re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Whitelist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raison', models.CharField(max_length=255)),
                ('date_start', models.DateTimeField(auto_now_add=True)),
                ('date_end', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'whitelist (free of charge access)',
                'verbose_name_plural': 'whitelists (free of charge access)',
                'permissions': (('view_whitelist', 'Can view a whitelist object'),),
            },
            bases=(re2o.mixins.RevMixin, re2o.mixins.AclMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Adherent',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(max_length=255)),
                ('gpg_fingerprint', models.CharField(blank=True, max_length=49, null=True)),
                ('room', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='topologie.Room')),
            ],
            options={
                'verbose_name': 'member',
                'verbose_name_plural': 'members',
                'abstract': False,
            },
            bases=('users.user',),
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('mailing', models.BooleanField(default=False)),
                ('administrators', models.ManyToManyField(blank=True, related_name='club_administrator', to='users.Adherent')),
                ('members', models.ManyToManyField(blank=True, related_name='club_members', to='users.Adherent')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='topologie.Room')),
            ],
            options={
                'verbose_name': 'club',
                'verbose_name_plural': 'clubs',
                'abstract': False,
            },
            bases=('users.user',),
        ),
        migrations.AddField(
            model_name='whitelist',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='request',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='emailaddress',
            name='user',
            field=models.ForeignKey(help_text='User of the local email account', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ban',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='users.School'),
        ),
        migrations.AddField(
            model_name='user',
            name='shell',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='users.ListShell'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
