# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2019-04-08 16:05
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import re2o.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('preferences', '0001_initial_from_re2o'),
        ('machines', '0001_initial_from_re2o'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessPoint',
            fields=[
                ('machine_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='machines.Machine')),
                ('location', models.CharField(blank=True, help_text="Details about the AP's location", max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'access point',
                'verbose_name_plural': 'access points',
                'permissions': (('view_accesspoint', 'Can view an access point object'),),
            },
            bases=(re2o.mixins.AclMixin, 'machines.machine'),
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'building',
                'verbose_name_plural': 'buildings',
                'permissions': (('view_building', 'Can view a building object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ConstructorSwitch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'switch constructor',
                'verbose_name_plural': 'switch constructors',
                'permissions': (('view_constructorswitch', 'Can view a switch constructor object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Dormitory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'dormitory',
                'verbose_name_plural': 'dormitories',
                'permissions': (('view_dormitory', 'Can view a dormitory object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ModelSwitch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=255)),
                ('commercial_name', models.CharField(blank=True, max_length=255, null=True)),
                ('firmware', models.CharField(blank=True, max_length=255, null=True)),
                ('is_modular', models.BooleanField(default=False, help_text='The switch model is modular.')),
                ('is_itself_module', models.BooleanField(default=False, help_text='The switch is considered as a module.')),
                ('constructor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='topologie.ConstructorSwitch')),
            ],
            options={
                'verbose_name': 'switch model',
                'verbose_name_plural': 'switch models',
                'permissions': (('view_modelswitch', 'Can view a switch model object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ModuleOnSwitch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(help_text='Slot on switch', max_length=15, verbose_name='Slot')),
            ],
            options={
                'verbose_name': 'link between switch and module',
                'verbose_name_plural': 'links between switch and module',
                'permissions': (('view_moduleonswitch', 'Can view a link between switch and module object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ModuleSwitch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(help_text='Reference of a module', max_length=255, verbose_name='Module reference')),
                ('comment', models.CharField(blank=True, help_text='Comment', max_length=255, null=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'switch module',
                'verbose_name_plural': 'switch modules',
                'permissions': (('view_moduleswitch', 'Can view a switch module object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Port',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port', models.PositiveIntegerField()),
                ('state', models.BooleanField(default=True, help_text='Port state Active', verbose_name='Port state Active')),
                ('details', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'port',
                'verbose_name_plural': 'ports',
                'permissions': (('view_port', 'Can view a port object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PortProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('profil_default', models.CharField(blank=True, choices=[('room', 'Room'), ('access_point', 'Access point'), ('uplink', 'Uplink'), ('asso_machine', 'Organisation machine'), ('nothing', 'Nothing')], max_length=32, null=True, unique=True, verbose_name='Default profile')),
                ('radius_type', models.CharField(choices=[('NO', 'NO'), ('802.1X', '802.1X'), ('MAC-radius', 'MAC-RADIUS')], help_text='Type of RADIUS authentication : inactive, MAC-address or 802.1X', max_length=32, verbose_name='RADIUS type')),
                ('radius_mode', models.CharField(choices=[('STRICT', 'STRICT'), ('COMMON', 'COMMON')], default='COMMON', help_text='In case of MAC-authentication : mode COMMON or STRICT on this port', max_length=32, verbose_name='RADIUS mode')),
                ('speed', models.CharField(choices=[('10-half', '10-half'), ('100-half', '100-half'), ('10-full', '10-full'), ('100-full', '100-full'), ('1000-full', '1000-full'), ('auto', 'auto'), ('auto-10', 'auto-10'), ('auto-100', 'auto-100')], default='auto', help_text='Port speed limit', max_length=32)),
                ('mac_limit', models.IntegerField(blank=True, help_text='Limit of MAC-address on this port', null=True, verbose_name='MAC limit')),
                ('flow_control', models.BooleanField(default=False, help_text='Flow control')),
                ('dhcp_snooping', models.BooleanField(default=False, help_text='Protect against rogue DHCP', verbose_name='DHCP snooping')),
                ('dhcpv6_snooping', models.BooleanField(default=False, help_text='Protect against rogue DHCPv6', verbose_name='DHCPv6 snooping')),
                ('arp_protect', models.BooleanField(default=False, help_text='Check if IP adress is DHCP assigned', verbose_name='ARP protection')),
                ('ra_guard', models.BooleanField(default=False, help_text='Protect against rogue RA', verbose_name='RA guard')),
                ('loop_protect', models.BooleanField(default=False, help_text='Protect against loop', verbose_name='Loop protection')),
                ('vlan_tagged', models.ManyToManyField(blank=True, related_name='vlan_tagged', to='machines.Vlan', verbose_name='VLAN(s) tagged')),
                ('vlan_untagged', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vlan_untagged', to='machines.Vlan', verbose_name='VLAN untagged')),
            ],
            options={
                'verbose_name': 'port profile',
                'verbose_name_plural': 'port profiles',
                'permissions': (('view_port_profile', 'Can view a port profile object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('details', models.CharField(blank=True, max_length=255)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='topologie.Building')),
            ],
            options={
                'verbose_name': 'room',
                'verbose_name_plural': 'rooms',
                'ordering': ['building__name'],
                'permissions': (('view_room', 'Can view a room object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Stack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('stack_id', models.CharField(max_length=32, unique=True)),
                ('details', models.CharField(blank=True, max_length=255, null=True)),
                ('member_id_min', models.PositiveIntegerField()),
                ('member_id_max', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'switches stack',
                'verbose_name_plural': 'switches stacks',
                'permissions': (('view_stack', 'Can view a stack object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Switch',
            fields=[
                ('machine_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='machines.Machine')),
                ('number', models.PositiveIntegerField(help_text='Number of ports')),
                ('stack_member_id', models.PositiveIntegerField(blank=True, null=True)),
                ('automatic_provision', models.BooleanField(default=False, help_text='Automatic provision for the switch')),
                ('management_creds', models.ForeignKey(blank=True, help_text='Management credentials for the switch', null=True, on_delete=django.db.models.deletion.PROTECT, to='preferences.SwitchManagementCred')),
                ('model', models.ForeignKey(blank=True, help_text='Switch model', null=True, on_delete=django.db.models.deletion.SET_NULL, to='topologie.ModelSwitch')),
                ('radius_key', models.ForeignKey(blank=True, help_text='RADIUS key of the switch', null=True, on_delete=django.db.models.deletion.PROTECT, to='preferences.RadiusKey')),
                ('stack', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='topologie.Stack')),
            ],
            options={
                'verbose_name': 'switch',
                'verbose_name_plural': 'switches',
                'permissions': (('view_switch', 'Can view a switch object'),),
            },
            bases=(re2o.mixins.AclMixin, 'machines.machine'),
        ),
        migrations.CreateModel(
            name='SwitchBay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('info', models.CharField(blank=True, max_length=255, null=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='topologie.Building')),
            ],
            options={
                'verbose_name': 'switch bay',
                'verbose_name_plural': 'switch bays',
                'permissions': (('view_switchbay', 'Can view a switch bay object'),),
            },
            bases=(re2o.mixins.AclMixin, re2o.mixins.RevMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('machines.machine',),
        ),
        migrations.AddField(
            model_name='switch',
            name='switchbay',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='topologie.SwitchBay'),
        ),
        migrations.AddField(
            model_name='port',
            name='custom_profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='topologie.PortProfile'),
        ),
        migrations.AddField(
            model_name='port',
            name='machine_interface',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='machines.Interface'),
        ),
        migrations.AddField(
            model_name='port',
            name='related',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_port', to='topologie.Port'),
        ),
        migrations.AddField(
            model_name='port',
            name='room',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='topologie.Room'),
        ),
        migrations.AddField(
            model_name='port',
            name='switch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ports', to='topologie.Switch'),
        ),
        migrations.AddField(
            model_name='moduleonswitch',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='topologie.ModuleSwitch'),
        ),
        migrations.AddField(
            model_name='moduleonswitch',
            name='switch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='topologie.Switch'),
        ),
        migrations.AddField(
            model_name='building',
            name='dormitory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='topologie.Dormitory'),
        ),
        migrations.AlterUniqueTogether(
            name='switch',
            unique_together=set([('stack', 'stack_member_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='room',
            unique_together=set([('name', 'building')]),
        ),
        migrations.AlterUniqueTogether(
            name='port',
            unique_together=set([('switch', 'port')]),
        ),
        migrations.AlterUniqueTogether(
            name='moduleonswitch',
            unique_together=set([('slot', 'switch')]),
        ),
    ]
